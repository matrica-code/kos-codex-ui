{
  "ConfigProperty@config-property-boolean.tsx": "export const ConfigProperty: React.FunctionComponent<Props> = kosComponent(\n  ({ device }: Props) => {\n    const [value, setValue] = useState(device.occlusionPolicy.value);\n\n    return (\n      <LayoutContainer>\n        The Occlusion Policy is set to {device.occlusionPolicy.value}\n        <FormLayout>\n          <select\n            onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n              setValue(e.target.value as OcclusionPolicyOptions)\n            }\n          >\n            {device.occlusionPolicy.options?.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          <Button\n            onClick={() => {\n              device.occlusionPolicy.updateProperty(value || \"NONE\");\n              setValue(() => device.occlusionPolicy.value);\n            }}\n            type=\"button\"\n          >\n            Change Name\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "ConfigPropertyEnum@config-property-enum.tsx": "export const ConfigPropertyEnum: React.FunctionComponent<Props> = kosComponent(\n  ({ device }: Props) => {\n    const [value, setValue] = useState(device.occlusionPolicy.value);\n\n    return (\n      <LayoutContainer>\n        The Occlusion Policy is set to {device.occlusionPolicy.value}\n        <FormLayout>\n          <Select\n            onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n              setValue(e.target.value as OcclusionPolicyOptions)\n            }\n          >\n            {device.occlusionPolicy.options?.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </Select>\n          <Button\n            onClick={() => {\n              device.occlusionPolicy.updateProperty(value || \"NONE\");\n              setValue(() => device.occlusionPolicy.value);\n            }}\n            type=\"button\"\n          >\n            Change Policy\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "ConfigProperty@config-property.tsx": "export const ConfigProperty: React.FunctionComponent<Props> = kosComponent(\n  ({ device }: Props) => {\n    const [value, setValue] = useState(device.deviceName.value || \"\");\n\n    return (\n      <LayoutContainer>\n        The name of this device is {device.deviceName.value}\n        <FormLayout>\n          <Input\n            value={value}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setValue(e.target.value)\n            }\n          />\n          <Button\n            onClick={() => device.deviceName.updateProperty(value)}\n            type=\"button\"\n          >\n            Change Name\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "CounterExample@counter-example.tsx": "export const CounterExample: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n\n  const { count } = model || {};\n\n  return (\n    <Main>\n      <div>Active Count: {count}</div>\n    </Main>\n  );\n});",
  "CounterWithToggle@counter-example.tsx": "export const CounterWithToggle: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n\n  const { count, toggleCounter, isCounting } = model || {};\n\n  return (\n    <Main>\n      <div>Active Count: {count}</div>\n      <button onClick={toggleCounter} type=\"button\">\n        {isCounting ? \"Stop\" : \"Start\"}\n      </button>\n    </Main>\n  );\n});",
  "CounterWithColor@counter-example.tsx": "export const CounterWithColor: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n  const { model: colorModel } = useColor();\n\n  const { count, toggleCounter, isCounting } = model || {};\n  const { color } = colorModel || {};\n\n  return (\n    <Main color={color}>\n      <div>Active Count: {count}</div>\n      <button onClick={toggleCounter} type=\"button\">\n        {isCounting ? \"Stop\" : \"Start\"}\n      </button>\n    </Main>\n  );\n});",
  "CounterWithHOC@counter-example.tsx": "const Counter: React.FunctionComponent<{\n  counter: CounterModel;\n}> = kosComponent(({ counter }: { counter: CounterModel }) => {\n  return (\n    <Main>\n      <div>Active Count: {counter.count}</div>\n    </Main>\n  );\n});",
  "CounterHOCDeclaration@counter-example.tsx": "export const CounterWithHOC = withCounter(Counter);",
  "Region@region.tsx": "export const Region: React.FunctionComponent = kosComponent(() => {\n  const { regionModel, regionSelectProps } = useKosRegions();\n\n  const { formattedDate } = useFormattedDate({\n    year: now.getFullYear(),\n    month: now.getMonth(),\n    day: now.getDate(),\n    formatString: regionModel?.selectedDateFormat || \"\",\n  });\n\n  const formattedTime = useFormattedTime(\n    now,\n    regionModel?.selectedTimeFormat || \"\",\n  );\n\n  return (\n    <RegionContainer>\n      <div>Unformatted date: {now.toString()}</div>\n      <div>\n        Formatted Date & Time: {formattedDate} - {formattedTime}\n      </div>\n      <label>Select a region:</label>\n      <Select\n        onChange={regionSelectProps.onChange}\n        value={regionSelectProps.value}\n      >\n        {regionSelectProps.options}\n      </Select>\n    </RegionContainer>\n  );\n});",
  "TeamComponent@team.tsx": "export const Team: React.FunctionComponent<Props> = kosComponent(({ team }) => (\n  <Card padding=\"large\" title={team.name}>\n    <TextContainer>\n      <Heading>{team.name}</Heading>\n    </TextContainer>\n  </Card>\n));",
  "TeamWithUser@team.tsx": "export const TeamWithUser: React.FunctionComponent<Props> = kosComponent(\n  ({ team }) => {\n    const [username, setUsername] = useState(\"\");\n    const [role, setRole] = useState(\"guest\");\n\n    const { model } = useUserContainer();\n\n    const handleClick = () => {\n      if (!username) return;\n      model?.createUser({ name: username, role, teamId: team.id });\n      setUsername(\"\");\n      setRole(\"guest\");\n    };\n\n    const users = model?.getUsersByTeamId(team.id);\n\n    return (\n      <TeamCard padding=\"large\" title={team.name}>\n        <Heading as=\"h4\">{team.name}</Heading>\n        <List>\n          {users?.map((user) => <User key={user.id} user={user} />) ?? null}\n        </List>\n        <InputLayout>\n          <Input\n            value={username}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setUsername(e.target.value)\n            }\n          />\n          <Select onChange={(e) => setRole(e.target.value)}>\n            {[\n              { id: \"admin\", label: \"Admin\" },\n              { id: \"superadmin\", label: \"Superadmin\" },\n              { id: \"guest\", label: \"guest\" },\n              { id: \"user\", label: \"default\" },\n            ].map(({ id, label }) => {\n              return <option key={id} selected={id === role} label={label} />;\n            })}\n          </Select>\n          <Button type=\"button\" onClick={handleClick}>\n            Create\n          </Button>\n        </InputLayout>\n      </TeamCard>\n    );\n  },\n);",
  "unit-config@unit-config.tsx": "export const UnitConfig: React.FunctionComponent<Props> = kosComponent(\n  ({ unitExample }: Props) => {\n    const [value, setValue] = useState(unitExample.maxPourVolume.value);\n\n    return (\n      <LayoutContainer>\n        The max pour volume is {unitExample.maxPourVolume.displayValue}, but is\n        stored as {unitExample.maxPourVolume.rawValue} (in ml).\n        <FormLayout>\n          <Input\n            value={value}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setValue(Number(e.target.value))\n            }\n            type=\"number\"\n          />\n          <Button\n            onClick={() => {\n              unitExample.maxPourVolume.updateProperty(Number(value));\n              setValue(() => unitExample.maxPourVolume.value);\n            }}\n            type=\"button\"\n          >\n            Change Limit\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "unit-config-export@unit-config.tsx": "export default withUnitExample(UnitConfig);",
  "units-demo@units.tsx": "export const Units = () => {\n  const [value, setValue] = useState(\"2000\");\n  const { regionData } = useKosRegions();\n  const targetUnit = regionData?.unitSystemId === \"si\" ? \"ml\" : \"fluid-ounce\";\n  const inLocalUnits = convert(Number(value), \"ml\", targetUnit);\n  return (\n    <UnitLayout>\n      <div>\n        {inLocalUnits} {targetUnit}\n      </div>\n      <Input\n        value={value}\n        onChange={(e: ChangeEvent<HTMLInputElement>) =>\n          setValue(e.target.value)\n        }\n      />\n    </UnitLayout>\n  );\n};",
  "TeamList@team-list.tsx": "export const TeamList: React.FunctionComponent<Props> = kosComponent(\n  (props: Props) => {\n    const [name, setName] = useState(\"\");\n\n    const { data, createTeam, removeModel } = props.teamContainer;\n\n    const handleAddTeam = () => {\n      createTeam?.(name);\n      setName(\"\");\n    };\n\n    return (\n      <div>\n        <LayoutContainer>\n          <label htmlFor=\"name\">Name</label>\n          <Input\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setName(e.target.value)\n            }\n          />\n          <Button onClick={handleAddTeam} type=\"button\">\n            Add Team\n          </Button>\n        </LayoutContainer>\n        <ul>\n          {data &&\n            data.map((team) => (\n              <TeamWithUser\n                key={team.id}\n                team={team}\n                removeTeam={() => removeModel?.(team.id)}\n              />\n            ))}\n        </ul>\n      </div>\n    );\n  },\n);",
  "TroublesList@troubles-list.tsx": "export const TroublesList: React.FunctionComponent = kosComponent(() => {\n  const { model } = useTroublesContainer();\n  return (\n    <LayoutContainer>\n      <Heading>List of Available Troubles</Heading>\n      {model?.data.map((troubles) => (\n        <div key={troubles.id}>\n          Path: {troubles.boardPath || \"none\"} - Type: {troubles.type}\n        </div>\n      ))}\n    </LayoutContainer>\n  );\n});",
  "color-model@color-model.ts": "@kosModel(MODEL_TYPE)\nexport class ColorModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n\n  @kosDependency<CounterModel>({ modelType: Counter.type })\n  counterModel!: CounterModel;\n\n  private colorArray: string[] = [\"#048FEC\", \"#9747FF\", \"#01528A\", \"#B4DEFA\"];\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  get color(): string {\n    return this.colorArray[this.counterModel.count % this.colorArray.length];\n  }\n}",
  "counter-model@counter-model.ts": "@kosModel(MODEL_TYPE)\nexport class CounterModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  count = 0;\n  interval: NodeJS.Timeout | null = null;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  increment(): void {\n    this.count += 1;\n  }\n\n  stopCounter(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  startCounter(): void {\n    this.interval = setInterval(() => {\n      this.increment();\n    }, 1000);\n  }\n\n  toggleCounter = (): void =>\n    this.interval ? this.stopCounter() : this.startCounter();\n\n  get isCounting() {\n    return !!this.interval;\n  }\n\n  // -------------------LIFECYCLE----------------------------\n\n  async load(): Promise<void> {\n    this.startCounter();\n  }\n\n  async destroy(): Promise<void> {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n}",
  "counter-model-simple@counter-model.ts": "@kosModel(MODEL_TYPE)\nexport class CounterModelSimple implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  count = 0;\n  interval: NodeJS.Timeout | null = null;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  increment(): void {\n    this.count += 1;\n  }\n\n  async load(): Promise<void> {\n    this.interval = setInterval(() => {\n      this.increment();\n    }, 1000);\n  }\n\n  async destroy(): Promise<void> {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n}",
  "DeviceModel@device-model.ts": "@kosModel(MODEL_TYPE)\nexport class DeviceModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  private logger: KosContextLogger;\n\n  // extract-code device-model-string\n  @kosConfigProperty({\n    path: \"kos:device\",\n    attribute: \"name\",\n  })\n  deviceName!: KosConfigProperty<string>;\n\n  // extract-code device-model-enum\n  @kosConfigProperty({\n    path: \"kos:service:pumpError\",\n    attribute: \"occlusionPolicy\",\n  })\n  occlusionPolicy!: KosConfigProperty<OcclusionPolicyOptions>;\n\n  // extract-code device-model-boolean\n  @kosConfigProperty({\n    path: \"kos:service:pumpError\",\n    attribute: \"blockSoldOutWater\",\n  })\n  blockSoldOutWater!: KosConfigProperty<boolean>;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n}",
  "device-model-string@device-model.ts": "@kosConfigProperty({\n  path: \"kos:device\",\n  attribute: \"name\",\n})\ndeviceName!: KosConfigProperty<string>;",
  "device-model-enum@device-model.ts": "@kosConfigProperty({\n  path: \"kos:service:pumpError\",\n  attribute: \"occlusionPolicy\",\n})\nocclusionPolicy!: KosConfigProperty<OcclusionPolicyOptions>;",
  "device-model-boolean@device-model.ts": "@kosConfigProperty({\n  path: \"kos:service:pumpError\",\n  attribute: \"blockSoldOutWater\",\n})\nblockSoldOutWater!: KosConfigProperty<boolean>;",
  "property@team-container-model.ts": "@kosChild private _models: IKosModelContainer<TeamModel>;",
  "method@team-container-model.ts": "createTeam(name: string) {\n  const model = Team.factory(`${this._models.data.length + 1}`)({\n    name,\n  });\n\n  this.addModel(model);\n}",
  "TeamModel@team-model.ts": "@kosModel(MODEL_TYPE)\nexport class TeamModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  name!: string;\n\n  constructor(modelId: string, options: TeamOptions) {\n    this.id = modelId;\n\n    if (options) {\n      this.name = options.name;\n      // Assign options properties here.\n    }\n  }\n\n  remove() {\n    this.remove();\n  }\n}",
  "update@troubles-container-model.ts": "updateTroubles(data: TroublesOptions[]) {\n  data.forEach((trouble) => {\n    this.addModel(\n      Troubles.instance(`TROUBLE_ID_${trouble.id}`)\n        .options({ ...trouble })\n        .build(),\n    );\n  });\n}",
  "initialize@troubles-container-model.ts": "async init(): Promise<void> {\n  this.logger.debug(`initializing troubles-container container ${this.id}`);\n  const [err, data] = await getTroublesContainer();\n  if (err) {\n    this.logger.error(\"Unable to access troubles endpoint\");\n    return;\n  } else if (data) {\n    this.updateTroubles(data);\n  }\n}",
  "TroublesConstructor@troubles-model.ts": "constructor(\n  modelId: string,\n  options: TroublesOptions,\n  context: KosCreationContext,\n) {\n  this.id = modelId;\n  this.logger = context.logger;\n  if (options) {\n    this.numId = options.id;\n    this.boardPath = options.boardPath;\n    this.isResolvable = options.resolvable;\n    this.type = options.type;\n  }\n}",
  "model-index@user-container-model.ts": "this._models = new KosModelContainer<UserModel>({\n  parentId: modelId,\n  indexMap: {\n    [INDEX_BY_TEAM_ID]: \"teamId\",\n    [INDEX_BY_ROLE_TYPE]: (model) =>\n      [\"admin\", \"superadmin\"].includes(model.role) ? \"admin\" : \"non-admin\",\n  },\n});",
  "model-index-get@user-container-model.ts": "getUsersByTeamId(id: string) {\n  return this.models.getIndexByKey(\"byTeamId\", id);\n}",
  "UserModel@user-model.ts": "@kosModel(MODEL_TYPE)\nexport class UserModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  name!: string;\n  role!: string;\n\n  teamId!: string;\n\n  constructor(modelId: string, options: UserOptions) {\n    this.id = modelId;\n\n    this.name = options.name;\n    this.role = options.role;\n    this.teamId = options.teamId;\n  }\n\n  updateModel(options: UserOptions): void {\n    // Update model properties here.\n  }\n\n  // -------------------LIFECYCLE----------------------------\n\n  async init(): Promise<void> {\n    console.log(`initializing user ${this.id}`);\n  }\n\n  async load(): Promise<void> {\n    console.log(`loading user ${this.id}`);\n  }\n}",
  "unit-example-config@unit-example-model.ts": "@kosConfigProperty({\n  path: \"app:kosdev.ddk:app\",\n  attribute: \"maxPourVolume\",\n})\nmaxPourVolume!: KosConfigProperty<number>;",
  "OcclusionPolicyOptions@index.d.ts": "export type OcclusionPolicyOptions = \"NOTIFY\" | \"NONE\" | \"BLOCK_POURING\";"
}