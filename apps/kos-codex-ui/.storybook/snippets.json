{
  "TeamComponent@team.tsx": "export const Team: React.FunctionComponent<Props> = kosComponent(({ team }) => (\n  <Card padding=\"large\" title={team.name}>\n    <TextContainer>\n      <Heading>{team.name}</Heading>\n    </TextContainer>\n  </Card>\n));",
  "TeamWithUser@team.tsx": "export const TeamWithUser: React.FunctionComponent<Props> = kosComponent(\n  ({ team }) => {\n    const [username, setUsername] = useState(\"\");\n    const [role, setRole] = useState(\"guest\");\n\n    const { model } = useUserContainer();\n\n    const handleClick = () => {\n      if (!username) return;\n      model?.createUser({ name: username, role, teamId: team.id });\n      setUsername(\"\");\n      setRole(\"guest\");\n    };\n\n    const users = model?.getUsersByTeamId(team.id);\n\n    return (\n      <TeamCard padding=\"large\" title={team.name}>\n        <Heading as=\"h4\">{team.name}</Heading>\n        <List>\n          {users?.map((user) => <User key={user.id} user={user} />) ?? null}\n        </List>\n        <InputContainer>\n          <Input\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <select onChange={(e) => setRole(e.target.value)}>\n            {[\n              { id: \"admin\", label: \"Admin\" },\n              { id: \"superadmin\", label: \"Superadmin\" },\n              { id: \"guest\", label: \"guest\" },\n              { id: \"user\", label: \"default\" },\n            ].map(({ id, label }) => {\n              return <option key={id} selected={id === role} label={label} />;\n            })}\n          </select>\n          <Button type=\"button\" onClick={handleClick}>\n            Create\n          </Button>\n        </InputContainer>\n      </TeamCard>\n    );\n  },\n);",
  "CounterExample@counter-example.tsx": "export const CounterExample: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n\n  const { count } = model || {};\n\n  return (\n    <Main>\n      <div>Active Count: {count}</div>\n    </Main>\n  );\n});",
  "CounterWithToggle@counter-example.tsx": "export const CounterWithToggle: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n\n  const { count, toggleCounter, isCounting } = model || {};\n\n  return (\n    <Main>\n      <div>Active Count: {count}</div>\n      <button onClick={toggleCounter} type=\"button\">\n        {isCounting ? \"Stop\" : \"Start\"}\n      </button>\n    </Main>\n  );\n});",
  "CounterWithColor@counter-example.tsx": "export const CounterWithColor: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n  const { model: colorModel } = useColor();\n\n  const { count, toggleCounter, isCounting } = model || {};\n  const { color } = colorModel || {};\n\n  return (\n    <Main color={color}>\n      <div>Active Count: {count}</div>\n      <button onClick={toggleCounter} type=\"button\">\n        {isCounting ? \"Stop\" : \"Start\"}\n      </button>\n    </Main>\n  );\n});",
  "TeamList@team-list.tsx": "export const TeamList: React.FunctionComponent = kosComponent(() => {\n  const { model } = useTeamContainer();\n  const [name, setName] = useState(\"\");\n\n  const { data, createTeam, removeModel } = model || {};\n\n  const handleAddTeam = () => {\n    createTeam?.(name);\n    setName(\"\");\n  };\n\n  return (\n    <TeamListContainer>\n      <InputContainer>\n        <Label htmlFor=\"name\">Name</Label>\n        <Input\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n        <Button onClick={handleAddTeam} type=\"button\">\n          Add Team\n        </Button>\n      </InputContainer>\n      <ul>\n        {data &&\n          data.map((team) => (\n            <TeamWithUser\n              key={team.id}\n              team={team}\n              removeTeam={() => removeModel?.(team.id)}\n            />\n          ))}\n      </ul>\n    </TeamListContainer>\n  );\n});",
  "color-model@color-model.ts": "@kosModel(MODEL_TYPE)\nexport class ColorModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n\n  @kosDependency<CounterModel>({ modelType: Counter.type })\n  counterModel!: CounterModel;\n\n  private colorArray: string[] = [\"#048FEC\", \"#9747FF\", \"#01528A\", \"#B4DEFA\"];\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  get color(): string {\n    return this.colorArray[this.counterModel.count % this.colorArray.length];\n  }\n}",
  "counter-model@counter-model.ts": "@kosModel(MODEL_TYPE)\nexport class CounterModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  count = 0;\n  interval: NodeJS.Timeout | null = null;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  increment(): void {\n    this.count += 1;\n  }\n\n  stopCounter(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  startCounter(): void {\n    this.interval = setInterval(() => {\n      this.increment();\n    }, 1000);\n  }\n\n  toggleCounter = (): void =>\n    this.interval ? this.stopCounter() : this.startCounter();\n\n  get isCounting() {\n    return !!this.interval;\n  }\n\n  // -------------------LIFECYCLE----------------------------\n\n  async load(): Promise<void> {\n    this.startCounter();\n  }\n\n  async destroy(): Promise<void> {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n}",
  "counter-model-simple@counter-model.ts": "@kosModel(MODEL_TYPE)\nexport class CounterModelSimple implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  count = 0;\n  interval: NodeJS.Timeout | null = null;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  increment(): void {\n    this.count += 1;\n  }\n\n  async load(): Promise<void> {\n    this.interval = setInterval(() => {\n      this.increment();\n    }, 1000);\n  }\n\n  async destroy(): Promise<void> {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n}",
  "property@team-container-model.ts": "@kosChild private _models: IKosModelContainer<TeamModel>;",
  "method@team-container-model.ts": "createTeam(name: string) {\n  const model = Team.factory(`${this._models.data.length + 1}`)({\n    name,\n  });\n\n  this.addModel(model);\n}",
  "TeamModel@team-model.ts": "@kosModel(MODEL_TYPE)\nexport class TeamModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  name!: string;\n\n  constructor(modelId: string, options: TeamOptions) {\n    this.id = modelId;\n\n    if (options) {\n      this.name = options.name;\n      // Assign options properties here.\n    }\n  }\n\n  remove() {\n    this.remove();\n  }\n}",
  "model-index@user-container-model.ts": "this._models = new KosModelContainer<UserModel>({\n  parentId: modelId,\n  indexMap: {\n    [INDEX_BY_TEAM_ID]: \"teamId\",\n    [INDEX_BY_ROLE_TYPE]: (model) =>\n      [\"admin\", \"superadmin\"].includes(model.role) ? \"admin\" : \"non-admin\",\n  },\n});",
  "model-index-get@user-container-model.ts": "getUsersByTeamId(id: string) {\n  return this.models.getIndexByKey(\"byTeamId\", id);\n}",
  "UserModel@user-model.ts": "@kosModel(MODEL_TYPE)\nexport class UserModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  name!: string;\n  role!: string;\n\n  teamId!: string;\n\n  constructor(modelId: string, options: UserOptions) {\n    this.id = modelId;\n\n    this.name = options.name;\n    this.role = options.role;\n    this.teamId = options.teamId;\n  }\n\n  updateModel(options: UserOptions): void {\n    // Update model properties here.\n  }\n\n  // -------------------LIFECYCLE----------------------------\n\n  async init(): Promise<void> {\n    console.log(`initializing user ${this.id}`);\n  }\n\n  async load(): Promise<void> {\n    console.log(`loading user ${this.id}`);\n  }\n}"
}